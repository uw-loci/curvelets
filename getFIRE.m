function [object fibKey totLengthList endLengthList curvatureList widthList] = getFIRE(imgName,fireDir,fibProcMeth)

% ctFIRE.m - get the output of the Fire process and convert to something that can be used by CurveAlign
%
% Inputs
%   imgName     name of the image we would like to get the fire output for
%   fireDir     directory where the fire output is located (string)
%
% Optional Inputs
%
% Outputs
%   object  structure containing information about each fiber segment position and angle in image
%   fibKey  list containing the index of the beginning of each fiber within object
% 
%
% By Jeremy Bredfeldt and Carolyn Pehlke Laboratory for Optical and
% Computational Instrumentation 2013

%load the fiber list from the fire output mat file (this is generated by the CT-Fire program
dirList = dir(fireDir);
imgNameShort = imgName(1:length(imgName)-4);
for i = 1:length(dirList)
    if ~isempty(regexp(dirList(i).name,imgNameShort,'once'))
        fibListStruct = load([fireDir dirList(i).name]);
        break;
    end
end

fibStruct = fibListStruct.data; %extract the fiber list structure
LL1 = fibListStruct.cP.LL1;

%check if struct is empty, if so, return an empty object
if isempty(fibStruct)
    object = [];
    return;
end

%loop through all fibers, get the center and angle of each point in each fiber
num_fib = length(fibStruct.Fai);
X = fibStruct.Xai;

%search first to find the number of segments
totSeg = 0;
for i = 1:num_fib
%     fv = fibStruct.Fai(i).v;
%     numSeg = length(fv)-lag;
%     if numSeg > 0
%         totSeg = totSeg + numSeg;
%     end
    if fibStruct.M.L(i) > LL1
        numSeg = length(fibStruct.Fai(i).v);
        totSeg = totSeg + numSeg;
    end
end

%make an object of the right length
object(totSeg) = struct('center',[],'angle',[]);
fibKey = nan(1,totSeg); %keep track of the segNum at the beginning of each fiber
totLengthList = nan(1,totSeg);
endLengthList = nan(1,totSeg); 
curvatureList = nan(1,totSeg); 
widthList = nan(1,totSeg);

segNum = 0;

for i = 1:num_fib
    fv = fibStruct.Fai(i).v;
    %numSeg = length(fibStruct.M.FangI(i).angle_xy);
    numSeg = length(fv);
    if numSeg > 0 && fibStruct.M.L(i) > LL1
        %get fiber end to end length
        fsp = fibStruct.Fa(i).v(1);
        fep = fibStruct.Fa(i).v(end);
        dse = norm(fibStruct.Xa(fep,:)-fibStruct.Xa(fsp,:));
        %get fiber curvature
        fstr = dse/fibStruct.M.L(i);   % fiber straightness
        %get fiber width
        widave = 2*mean(fibStruct.Ra(fv));
        
        
        for j = 1:numSeg
            segNum = segNum + 1;              
            fibKey(segNum) = i;
            v1 = fv(j);
            %v2 = fv(j+lag);
            x1 = X(v1,:);
            %x2 = X(v2,:);

            pt1 = [x1(2) x1(1)];
            %pt2 = [x2(2) x2(1)];
            %seg = [pt1; pt2];
            %get the center of the segment
            %object(segNum).center = round(mean(seg));
            object(segNum).center = round(pt1);
%             run = pt1(2) - pt2(2);
%             rise = pt1(1) - pt2(1);
            if fibProcMeth == 0 || 2
                %set angle to be that of the current segment
                theta = -1*fibStruct.M.FangI(i).angle_xy(j);
            elseif fibProcMeth == 1
                %set angle of the current segment to be that of the fiber
                theta = -1*fibStruct.angle_xy(i);
            end
            %theta = atan(-rise/run); %range -pi/2 to pi/2, neg is to make angle match boundary file
            thetaDeg = theta*180/pi;
            if thetaDeg < 0
                thetaDeg = thetaDeg + 180;
            end
            object(segNum).angle = thetaDeg;
            
            totLengthList(segNum) = fibStruct.M.L(i);
            endLengthList(segNum) = dse; 
            curvatureList(segNum) = fstr; 
            widthList(segNum) = widave;            
        end
    end
end

  
end